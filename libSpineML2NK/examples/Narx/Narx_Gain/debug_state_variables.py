self.mu = garray.to_gpu( np.asarray( n_dict['mu'], dtype=np.float64 ))
self.nu = garray.to_gpu( np.asarray( n_dict['nu'], dtype=np.float64 ))
self.mum = garray.to_gpu( np.asarray( n_dict['mum'], dtype=np.float64 ))
self.num = garray.to_gpu( np.asarray( n_dict['num'], dtype=np.float64 ))
self.um = garray.to_gpu( np.asarray( n_dict['um'], dtype=np.float64 ))
self.Mean_y_1 = garray.to_gpu( np.asarray( n_dict['Mean_y_1'], dtype=np.float64 ))
self.Mean_ym_1 = garray.to_gpu( np.asarray( n_dict['Mean_ym_1'], dtype=np.float64 ))
self.Mean_f_1 = garray.to_gpu( np.asarray( n_dict['Mean_f_1'], dtype=np.float64 ))
self.Mean_g_1 = garray.to_gpu( np.asarray( n_dict['Mean_g_1'], dtype=np.float64 ))
self.Mean_y_2 = garray.to_gpu( np.asarray( n_dict['Mean_y_2'], dtype=np.float64 ))
self.Mean_ym_2 = garray.to_gpu( np.asarray( n_dict['Mean_ym_2'], dtype=np.float64 ))
self.Mean_f_2 = garray.to_gpu( np.asarray( n_dict['Mean_f_2'], dtype=np.float64 ))
self.Mean_g_2 = garray.to_gpu( np.asarray( n_dict['Mean_g_2'], dtype=np.float64 ))
self.Mean_y_3 = garray.to_gpu( np.asarray( n_dict['Mean_y_3'], dtype=np.float64 ))
self.Mean_ym_3 = garray.to_gpu( np.asarray( n_dict['Mean_ym_3'], dtype=np.float64 ))
self.Mean_f_3 = garray.to_gpu( np.asarray( n_dict['Mean_f_3'], dtype=np.float64 ))
self.Mean_g_3 = garray.to_gpu( np.asarray( n_dict['Mean_g_3'], dtype=np.float64 ))
self.Mean_g = garray.to_gpu( np.asarray( n_dict['Mean_g'], dtype=np.float64 ))
self.u_hat = garray.to_gpu( np.asarray( n_dict['u_hat'], dtype=np.float64 ))
self.Contrast_y_1 = garray.to_gpu( np.asarray( n_dict['Contrast_y_1'], dtype=np.float64 ))
self.Contrast_ym_1 = garray.to_gpu( np.asarray( n_dict['Contrast_ym_1'], dtype=np.float64 ))
self.Contrast_f_1 = garray.to_gpu( np.asarray( n_dict['Contrast_f_1'], dtype=np.float64 ))
self.Contrast_g_1 = garray.to_gpu( np.asarray( n_dict['Contrast_g_1'], dtype=np.float64 ))
self.Contrast_y_2 = garray.to_gpu( np.asarray( n_dict['Contrast_y_2'], dtype=np.float64 ))
self.Contrast_ym_2 = garray.to_gpu( np.asarray( n_dict['Contrast_ym_2'], dtype=np.float64 ))
self.Contrast_f_2 = garray.to_gpu( np.asarray( n_dict['Contrast_f_2'], dtype=np.float64 ))
self.Contrast_g_2 = garray.to_gpu( np.asarray( n_dict['Contrast_g_2'], dtype=np.float64 ))
self.Contrast_y_3 = garray.to_gpu( np.asarray( n_dict['Contrast_y_3'], dtype=np.float64 ))
self.Contrast_ym_3 = garray.to_gpu( np.asarray( n_dict['Contrast_ym_3'], dtype=np.float64 ))
self.Contrast_f_3 = garray.to_gpu( np.asarray( n_dict['Contrast_f_3'], dtype=np.float64 ))
self.Contrast_g_3 = garray.to_gpu( np.asarray( n_dict['Contrast_g_3'], dtype=np.float64 ))
self.Contrast_g = garray.to_gpu( np.asarray( n_dict['Contrast_g'], dtype=np.float64 ))
self.u_hat_thresh = garray.to_gpu( np.asarray( n_dict['u_hat_thresh'], dtype=np.float64 ))
self.y = garray.to_gpu( np.asarray( n_dict['y'], dtype=np.float64 ))
self.y1 = garray.to_gpu( np.asarray( n_dict['y1'], dtype=np.float64 ))
self.y2 = garray.to_gpu( np.asarray( n_dict['y2'], dtype=np.float64 ))
self.y3 = garray.to_gpu( np.asarray( n_dict['y3'], dtype=np.float64 ))
self.y4 = garray.to_gpu( np.asarray( n_dict['y4'], dtype=np.float64 ))
self.y5 = garray.to_gpu( np.asarray( n_dict['y5'], dtype=np.float64 ))
self.y6 = garray.to_gpu( np.asarray( n_dict['y6'], dtype=np.float64 ))
self.u1 = garray.to_gpu( np.asarray( n_dict['u1'], dtype=np.float64 ))
self.u2 = garray.to_gpu( np.asarray( n_dict['u2'], dtype=np.float64 ))
self.u3 = garray.to_gpu( np.asarray( n_dict['u3'], dtype=np.float64 ))
self.u4 = garray.to_gpu( np.asarray( n_dict['u4'], dtype=np.float64 ))
self.u5 = garray.to_gpu( np.asarray( n_dict['u5'], dtype=np.float64 ))
self.u6 = garray.to_gpu( np.asarray( n_dict['u6'], dtype=np.float64 ))
self.u7 = garray.to_gpu( np.asarray( n_dict['u7'], dtype=np.float64 ))
self.mu_file = tables.openFile(self.LPU_id + '_mu.h5', mode='w')
self.mu_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.nu_file = tables.openFile(self.LPU_id + '_nu.h5', mode='w')
self.nu_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.mum_file = tables.openFile(self.LPU_id + '_mum.h5', mode='w')
self.mum_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.num_file = tables.openFile(self.LPU_id + '_num.h5', mode='w')
self.num_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.um_file = tables.openFile(self.LPU_id + '_um.h5', mode='w')
self.um_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_y_1_file = tables.openFile(self.LPU_id + '_Mean_y_1.h5', mode='w')
self.Mean_y_1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_ym_1_file = tables.openFile(self.LPU_id + '_Mean_ym_1.h5', mode='w')
self.Mean_ym_1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_f_1_file = tables.openFile(self.LPU_id + '_Mean_f_1.h5', mode='w')
self.Mean_f_1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_g_1_file = tables.openFile(self.LPU_id + '_Mean_g_1.h5', mode='w')
self.Mean_g_1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_y_2_file = tables.openFile(self.LPU_id + '_Mean_y_2.h5', mode='w')
self.Mean_y_2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_ym_2_file = tables.openFile(self.LPU_id + '_Mean_ym_2.h5', mode='w')
self.Mean_ym_2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_f_2_file = tables.openFile(self.LPU_id + '_Mean_f_2.h5', mode='w')
self.Mean_f_2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_g_2_file = tables.openFile(self.LPU_id + '_Mean_g_2.h5', mode='w')
self.Mean_g_2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_y_3_file = tables.openFile(self.LPU_id + '_Mean_y_3.h5', mode='w')
self.Mean_y_3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_ym_3_file = tables.openFile(self.LPU_id + '_Mean_ym_3.h5', mode='w')
self.Mean_ym_3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_f_3_file = tables.openFile(self.LPU_id + '_Mean_f_3.h5', mode='w')
self.Mean_f_3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_g_3_file = tables.openFile(self.LPU_id + '_Mean_g_3.h5', mode='w')
self.Mean_g_3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_g_file = tables.openFile(self.LPU_id + '_Mean_g.h5', mode='w')
self.Mean_g_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u_hat_file = tables.openFile(self.LPU_id + '_u_hat.h5', mode='w')
self.u_hat_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_y_1_file = tables.openFile(self.LPU_id + '_Contrast_y_1.h5', mode='w')
self.Contrast_y_1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_ym_1_file = tables.openFile(self.LPU_id + '_Contrast_ym_1.h5', mode='w')
self.Contrast_ym_1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_f_1_file = tables.openFile(self.LPU_id + '_Contrast_f_1.h5', mode='w')
self.Contrast_f_1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_g_1_file = tables.openFile(self.LPU_id + '_Contrast_g_1.h5', mode='w')
self.Contrast_g_1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_y_2_file = tables.openFile(self.LPU_id + '_Contrast_y_2.h5', mode='w')
self.Contrast_y_2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_ym_2_file = tables.openFile(self.LPU_id + '_Contrast_ym_2.h5', mode='w')
self.Contrast_ym_2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_f_2_file = tables.openFile(self.LPU_id + '_Contrast_f_2.h5', mode='w')
self.Contrast_f_2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_g_2_file = tables.openFile(self.LPU_id + '_Contrast_g_2.h5', mode='w')
self.Contrast_g_2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_y_3_file = tables.openFile(self.LPU_id + '_Contrast_y_3.h5', mode='w')
self.Contrast_y_3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_ym_3_file = tables.openFile(self.LPU_id + '_Contrast_ym_3.h5', mode='w')
self.Contrast_ym_3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_f_3_file = tables.openFile(self.LPU_id + '_Contrast_f_3.h5', mode='w')
self.Contrast_f_3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_g_3_file = tables.openFile(self.LPU_id + '_Contrast_g_3.h5', mode='w')
self.Contrast_g_3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_g_file = tables.openFile(self.LPU_id + '_Contrast_g.h5', mode='w')
self.Contrast_g_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u_hat_thresh_file = tables.openFile(self.LPU_id + '_u_hat_thresh.h5', mode='w')
self.u_hat_thresh_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.y_file = tables.openFile(self.LPU_id + '_y.h5', mode='w')
self.y_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.y1_file = tables.openFile(self.LPU_id + '_y1.h5', mode='w')
self.y1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.y2_file = tables.openFile(self.LPU_id + '_y2.h5', mode='w')
self.y2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.y3_file = tables.openFile(self.LPU_id + '_y3.h5', mode='w')
self.y3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.y4_file = tables.openFile(self.LPU_id + '_y4.h5', mode='w')
self.y4_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.y5_file = tables.openFile(self.LPU_id + '_y5.h5', mode='w')
self.y5_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.y6_file = tables.openFile(self.LPU_id + '_y6.h5', mode='w')
self.y6_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u1_file = tables.openFile(self.LPU_id + '_u1.h5', mode='w')
self.u1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u2_file = tables.openFile(self.LPU_id + '_u2.h5', mode='w')
self.u2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u3_file = tables.openFile(self.LPU_id + '_u3.h5', mode='w')
self.u3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u4_file = tables.openFile(self.LPU_id + '_u4.h5', mode='w')
self.u4_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u5_file = tables.openFile(self.LPU_id + '_u5.h5', mode='w')
self.u5_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u6_file = tables.openFile(self.LPU_id + '_u6.h5', mode='w')
self.u6_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u7_file = tables.openFile(self.LPU_id + '_u7.h5', mode='w')
self.u7_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.mu = garray.to_gpu( np.asarray( n_dict['mu'], dtype=np.float64 ))
self.nu = garray.to_gpu( np.asarray( n_dict['nu'], dtype=np.float64 ))
self.mum = garray.to_gpu( np.asarray( n_dict['mum'], dtype=np.float64 ))
self.num = garray.to_gpu( np.asarray( n_dict['num'], dtype=np.float64 ))
self.um = garray.to_gpu( np.asarray( n_dict['um'], dtype=np.float64 ))
self.Mean_y_1 = garray.to_gpu( np.asarray( n_dict['Mean_y_1'], dtype=np.float64 ))
self.Mean_ym_1 = garray.to_gpu( np.asarray( n_dict['Mean_ym_1'], dtype=np.float64 ))
self.Mean_f_1 = garray.to_gpu( np.asarray( n_dict['Mean_f_1'], dtype=np.float64 ))
self.Mean_g_1 = garray.to_gpu( np.asarray( n_dict['Mean_g_1'], dtype=np.float64 ))
self.Mean_y_2 = garray.to_gpu( np.asarray( n_dict['Mean_y_2'], dtype=np.float64 ))
self.Mean_ym_2 = garray.to_gpu( np.asarray( n_dict['Mean_ym_2'], dtype=np.float64 ))
self.Mean_f_2 = garray.to_gpu( np.asarray( n_dict['Mean_f_2'], dtype=np.float64 ))
self.Mean_g_2 = garray.to_gpu( np.asarray( n_dict['Mean_g_2'], dtype=np.float64 ))
self.Mean_y_3 = garray.to_gpu( np.asarray( n_dict['Mean_y_3'], dtype=np.float64 ))
self.Mean_ym_3 = garray.to_gpu( np.asarray( n_dict['Mean_ym_3'], dtype=np.float64 ))
self.Mean_f_3 = garray.to_gpu( np.asarray( n_dict['Mean_f_3'], dtype=np.float64 ))
self.Mean_g_3 = garray.to_gpu( np.asarray( n_dict['Mean_g_3'], dtype=np.float64 ))
self.Mean_g = garray.to_gpu( np.asarray( n_dict['Mean_g'], dtype=np.float64 ))
self.u_hat = garray.to_gpu( np.asarray( n_dict['u_hat'], dtype=np.float64 ))
self.Contrast_y_1 = garray.to_gpu( np.asarray( n_dict['Contrast_y_1'], dtype=np.float64 ))
self.Contrast_ym_1 = garray.to_gpu( np.asarray( n_dict['Contrast_ym_1'], dtype=np.float64 ))
self.Contrast_f_1 = garray.to_gpu( np.asarray( n_dict['Contrast_f_1'], dtype=np.float64 ))
self.Contrast_g_1 = garray.to_gpu( np.asarray( n_dict['Contrast_g_1'], dtype=np.float64 ))
self.Contrast_y_2 = garray.to_gpu( np.asarray( n_dict['Contrast_y_2'], dtype=np.float64 ))
self.Contrast_ym_2 = garray.to_gpu( np.asarray( n_dict['Contrast_ym_2'], dtype=np.float64 ))
self.Contrast_f_2 = garray.to_gpu( np.asarray( n_dict['Contrast_f_2'], dtype=np.float64 ))
self.Contrast_g_2 = garray.to_gpu( np.asarray( n_dict['Contrast_g_2'], dtype=np.float64 ))
self.Contrast_y_3 = garray.to_gpu( np.asarray( n_dict['Contrast_y_3'], dtype=np.float64 ))
self.Contrast_ym_3 = garray.to_gpu( np.asarray( n_dict['Contrast_ym_3'], dtype=np.float64 ))
self.Contrast_f_3 = garray.to_gpu( np.asarray( n_dict['Contrast_f_3'], dtype=np.float64 ))
self.Contrast_g_3 = garray.to_gpu( np.asarray( n_dict['Contrast_g_3'], dtype=np.float64 ))
self.Contrast_g = garray.to_gpu( np.asarray( n_dict['Contrast_g'], dtype=np.float64 ))
self.u_hat_thresh = garray.to_gpu( np.asarray( n_dict['u_hat_thresh'], dtype=np.float64 ))
self.y = garray.to_gpu( np.asarray( n_dict['y'], dtype=np.float64 ))
self.y1 = garray.to_gpu( np.asarray( n_dict['y1'], dtype=np.float64 ))
self.y2 = garray.to_gpu( np.asarray( n_dict['y2'], dtype=np.float64 ))
self.y3 = garray.to_gpu( np.asarray( n_dict['y3'], dtype=np.float64 ))
self.y4 = garray.to_gpu( np.asarray( n_dict['y4'], dtype=np.float64 ))
self.y5 = garray.to_gpu( np.asarray( n_dict['y5'], dtype=np.float64 ))
self.y6 = garray.to_gpu( np.asarray( n_dict['y6'], dtype=np.float64 ))
self.u1 = garray.to_gpu( np.asarray( n_dict['u1'], dtype=np.float64 ))
self.u2 = garray.to_gpu( np.asarray( n_dict['u2'], dtype=np.float64 ))
self.u3 = garray.to_gpu( np.asarray( n_dict['u3'], dtype=np.float64 ))
self.u4 = garray.to_gpu( np.asarray( n_dict['u4'], dtype=np.float64 ))
self.u5 = garray.to_gpu( np.asarray( n_dict['u5'], dtype=np.float64 ))
self.u6 = garray.to_gpu( np.asarray( n_dict['u6'], dtype=np.float64 ))
self.u7 = garray.to_gpu( np.asarray( n_dict['u7'], dtype=np.float64 ))
self.mu_file = tables.openFile(self.LPU_id + '_mu.h5', mode='w')
self.mu_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.nu_file = tables.openFile(self.LPU_id + '_nu.h5', mode='w')
self.nu_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.mum_file = tables.openFile(self.LPU_id + '_mum.h5', mode='w')
self.mum_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.num_file = tables.openFile(self.LPU_id + '_num.h5', mode='w')
self.num_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.um_file = tables.openFile(self.LPU_id + '_um.h5', mode='w')
self.um_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_y_1_file = tables.openFile(self.LPU_id + '_Mean_y_1.h5', mode='w')
self.Mean_y_1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_ym_1_file = tables.openFile(self.LPU_id + '_Mean_ym_1.h5', mode='w')
self.Mean_ym_1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_f_1_file = tables.openFile(self.LPU_id + '_Mean_f_1.h5', mode='w')
self.Mean_f_1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_g_1_file = tables.openFile(self.LPU_id + '_Mean_g_1.h5', mode='w')
self.Mean_g_1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_y_2_file = tables.openFile(self.LPU_id + '_Mean_y_2.h5', mode='w')
self.Mean_y_2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_ym_2_file = tables.openFile(self.LPU_id + '_Mean_ym_2.h5', mode='w')
self.Mean_ym_2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_f_2_file = tables.openFile(self.LPU_id + '_Mean_f_2.h5', mode='w')
self.Mean_f_2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_g_2_file = tables.openFile(self.LPU_id + '_Mean_g_2.h5', mode='w')
self.Mean_g_2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_y_3_file = tables.openFile(self.LPU_id + '_Mean_y_3.h5', mode='w')
self.Mean_y_3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_ym_3_file = tables.openFile(self.LPU_id + '_Mean_ym_3.h5', mode='w')
self.Mean_ym_3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_f_3_file = tables.openFile(self.LPU_id + '_Mean_f_3.h5', mode='w')
self.Mean_f_3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_g_3_file = tables.openFile(self.LPU_id + '_Mean_g_3.h5', mode='w')
self.Mean_g_3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_g_file = tables.openFile(self.LPU_id + '_Mean_g.h5', mode='w')
self.Mean_g_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u_hat_file = tables.openFile(self.LPU_id + '_u_hat.h5', mode='w')
self.u_hat_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_y_1_file = tables.openFile(self.LPU_id + '_Contrast_y_1.h5', mode='w')
self.Contrast_y_1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_ym_1_file = tables.openFile(self.LPU_id + '_Contrast_ym_1.h5', mode='w')
self.Contrast_ym_1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_f_1_file = tables.openFile(self.LPU_id + '_Contrast_f_1.h5', mode='w')
self.Contrast_f_1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_g_1_file = tables.openFile(self.LPU_id + '_Contrast_g_1.h5', mode='w')
self.Contrast_g_1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_y_2_file = tables.openFile(self.LPU_id + '_Contrast_y_2.h5', mode='w')
self.Contrast_y_2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_ym_2_file = tables.openFile(self.LPU_id + '_Contrast_ym_2.h5', mode='w')
self.Contrast_ym_2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_f_2_file = tables.openFile(self.LPU_id + '_Contrast_f_2.h5', mode='w')
self.Contrast_f_2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_g_2_file = tables.openFile(self.LPU_id + '_Contrast_g_2.h5', mode='w')
self.Contrast_g_2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_y_3_file = tables.openFile(self.LPU_id + '_Contrast_y_3.h5', mode='w')
self.Contrast_y_3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_ym_3_file = tables.openFile(self.LPU_id + '_Contrast_ym_3.h5', mode='w')
self.Contrast_ym_3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_f_3_file = tables.openFile(self.LPU_id + '_Contrast_f_3.h5', mode='w')
self.Contrast_f_3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_g_3_file = tables.openFile(self.LPU_id + '_Contrast_g_3.h5', mode='w')
self.Contrast_g_3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_g_file = tables.openFile(self.LPU_id + '_Contrast_g.h5', mode='w')
self.Contrast_g_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u_hat_thresh_file = tables.openFile(self.LPU_id + '_u_hat_thresh.h5', mode='w')
self.u_hat_thresh_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.y_file = tables.openFile(self.LPU_id + '_y.h5', mode='w')
self.y_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.y1_file = tables.openFile(self.LPU_id + '_y1.h5', mode='w')
self.y1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.y2_file = tables.openFile(self.LPU_id + '_y2.h5', mode='w')
self.y2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.y3_file = tables.openFile(self.LPU_id + '_y3.h5', mode='w')
self.y3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.y4_file = tables.openFile(self.LPU_id + '_y4.h5', mode='w')
self.y4_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.y5_file = tables.openFile(self.LPU_id + '_y5.h5', mode='w')
self.y5_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.y6_file = tables.openFile(self.LPU_id + '_y6.h5', mode='w')
self.y6_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u1_file = tables.openFile(self.LPU_id + '_u1.h5', mode='w')
self.u1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u2_file = tables.openFile(self.LPU_id + '_u2.h5', mode='w')
self.u2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u3_file = tables.openFile(self.LPU_id + '_u3.h5', mode='w')
self.u3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u4_file = tables.openFile(self.LPU_id + '_u4.h5', mode='w')
self.u4_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u5_file = tables.openFile(self.LPU_id + '_u5.h5', mode='w')
self.u5_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u6_file = tables.openFile(self.LPU_id + '_u6.h5', mode='w')
self.u6_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u7_file = tables.openFile(self.LPU_id + '_u7.h5', mode='w')
self.u7_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.mu = garray.to_gpu( np.asarray( n_dict['mu'], dtype=np.float64 ))
self.nu = garray.to_gpu( np.asarray( n_dict['nu'], dtype=np.float64 ))
self.mum = garray.to_gpu( np.asarray( n_dict['mum'], dtype=np.float64 ))
self.num = garray.to_gpu( np.asarray( n_dict['num'], dtype=np.float64 ))
self.um = garray.to_gpu( np.asarray( n_dict['um'], dtype=np.float64 ))
self.Mean_y_1 = garray.to_gpu( np.asarray( n_dict['Mean_y_1'], dtype=np.float64 ))
self.Mean_ym_1 = garray.to_gpu( np.asarray( n_dict['Mean_ym_1'], dtype=np.float64 ))
self.Mean_f_1 = garray.to_gpu( np.asarray( n_dict['Mean_f_1'], dtype=np.float64 ))
self.Mean_g_1 = garray.to_gpu( np.asarray( n_dict['Mean_g_1'], dtype=np.float64 ))
self.Mean_y_2 = garray.to_gpu( np.asarray( n_dict['Mean_y_2'], dtype=np.float64 ))
self.Mean_ym_2 = garray.to_gpu( np.asarray( n_dict['Mean_ym_2'], dtype=np.float64 ))
self.Mean_f_2 = garray.to_gpu( np.asarray( n_dict['Mean_f_2'], dtype=np.float64 ))
self.Mean_g_2 = garray.to_gpu( np.asarray( n_dict['Mean_g_2'], dtype=np.float64 ))
self.Mean_y_3 = garray.to_gpu( np.asarray( n_dict['Mean_y_3'], dtype=np.float64 ))
self.Mean_ym_3 = garray.to_gpu( np.asarray( n_dict['Mean_ym_3'], dtype=np.float64 ))
self.Mean_f_3 = garray.to_gpu( np.asarray( n_dict['Mean_f_3'], dtype=np.float64 ))
self.Mean_g_3 = garray.to_gpu( np.asarray( n_dict['Mean_g_3'], dtype=np.float64 ))
self.Mean_g = garray.to_gpu( np.asarray( n_dict['Mean_g'], dtype=np.float64 ))
self.u_hat = garray.to_gpu( np.asarray( n_dict['u_hat'], dtype=np.float64 ))
self.Contrast_y_1 = garray.to_gpu( np.asarray( n_dict['Contrast_y_1'], dtype=np.float64 ))
self.Contrast_ym_1 = garray.to_gpu( np.asarray( n_dict['Contrast_ym_1'], dtype=np.float64 ))
self.Contrast_f_1 = garray.to_gpu( np.asarray( n_dict['Contrast_f_1'], dtype=np.float64 ))
self.Contrast_g_1 = garray.to_gpu( np.asarray( n_dict['Contrast_g_1'], dtype=np.float64 ))
self.Contrast_y_2 = garray.to_gpu( np.asarray( n_dict['Contrast_y_2'], dtype=np.float64 ))
self.Contrast_ym_2 = garray.to_gpu( np.asarray( n_dict['Contrast_ym_2'], dtype=np.float64 ))
self.Contrast_f_2 = garray.to_gpu( np.asarray( n_dict['Contrast_f_2'], dtype=np.float64 ))
self.Contrast_g_2 = garray.to_gpu( np.asarray( n_dict['Contrast_g_2'], dtype=np.float64 ))
self.Contrast_y_3 = garray.to_gpu( np.asarray( n_dict['Contrast_y_3'], dtype=np.float64 ))
self.Contrast_ym_3 = garray.to_gpu( np.asarray( n_dict['Contrast_ym_3'], dtype=np.float64 ))
self.Contrast_f_3 = garray.to_gpu( np.asarray( n_dict['Contrast_f_3'], dtype=np.float64 ))
self.Contrast_g_3 = garray.to_gpu( np.asarray( n_dict['Contrast_g_3'], dtype=np.float64 ))
self.Contrast_g = garray.to_gpu( np.asarray( n_dict['Contrast_g'], dtype=np.float64 ))
self.u_hat_thresh = garray.to_gpu( np.asarray( n_dict['u_hat_thresh'], dtype=np.float64 ))
self.y = garray.to_gpu( np.asarray( n_dict['y'], dtype=np.float64 ))
self.y1 = garray.to_gpu( np.asarray( n_dict['y1'], dtype=np.float64 ))
self.y2 = garray.to_gpu( np.asarray( n_dict['y2'], dtype=np.float64 ))
self.y3 = garray.to_gpu( np.asarray( n_dict['y3'], dtype=np.float64 ))
self.y4 = garray.to_gpu( np.asarray( n_dict['y4'], dtype=np.float64 ))
self.y5 = garray.to_gpu( np.asarray( n_dict['y5'], dtype=np.float64 ))
self.y6 = garray.to_gpu( np.asarray( n_dict['y6'], dtype=np.float64 ))
self.u1 = garray.to_gpu( np.asarray( n_dict['u1'], dtype=np.float64 ))
self.u2 = garray.to_gpu( np.asarray( n_dict['u2'], dtype=np.float64 ))
self.u3 = garray.to_gpu( np.asarray( n_dict['u3'], dtype=np.float64 ))
self.u4 = garray.to_gpu( np.asarray( n_dict['u4'], dtype=np.float64 ))
self.u5 = garray.to_gpu( np.asarray( n_dict['u5'], dtype=np.float64 ))
self.u6 = garray.to_gpu( np.asarray( n_dict['u6'], dtype=np.float64 ))
self.u7 = garray.to_gpu( np.asarray( n_dict['u7'], dtype=np.float64 ))
self.mu_file = tables.openFile(self.LPU_id + '_mu.h5', mode='w')
self.mu_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.nu_file = tables.openFile(self.LPU_id + '_nu.h5', mode='w')
self.nu_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.mum_file = tables.openFile(self.LPU_id + '_mum.h5', mode='w')
self.mum_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.num_file = tables.openFile(self.LPU_id + '_num.h5', mode='w')
self.num_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.um_file = tables.openFile(self.LPU_id + '_um.h5', mode='w')
self.um_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_y_1_file = tables.openFile(self.LPU_id + '_Mean_y_1.h5', mode='w')
self.Mean_y_1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_ym_1_file = tables.openFile(self.LPU_id + '_Mean_ym_1.h5', mode='w')
self.Mean_ym_1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_f_1_file = tables.openFile(self.LPU_id + '_Mean_f_1.h5', mode='w')
self.Mean_f_1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_g_1_file = tables.openFile(self.LPU_id + '_Mean_g_1.h5', mode='w')
self.Mean_g_1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_y_2_file = tables.openFile(self.LPU_id + '_Mean_y_2.h5', mode='w')
self.Mean_y_2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_ym_2_file = tables.openFile(self.LPU_id + '_Mean_ym_2.h5', mode='w')
self.Mean_ym_2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_f_2_file = tables.openFile(self.LPU_id + '_Mean_f_2.h5', mode='w')
self.Mean_f_2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_g_2_file = tables.openFile(self.LPU_id + '_Mean_g_2.h5', mode='w')
self.Mean_g_2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_y_3_file = tables.openFile(self.LPU_id + '_Mean_y_3.h5', mode='w')
self.Mean_y_3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_ym_3_file = tables.openFile(self.LPU_id + '_Mean_ym_3.h5', mode='w')
self.Mean_ym_3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_f_3_file = tables.openFile(self.LPU_id + '_Mean_f_3.h5', mode='w')
self.Mean_f_3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_g_3_file = tables.openFile(self.LPU_id + '_Mean_g_3.h5', mode='w')
self.Mean_g_3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Mean_g_file = tables.openFile(self.LPU_id + '_Mean_g.h5', mode='w')
self.Mean_g_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u_hat_file = tables.openFile(self.LPU_id + '_u_hat.h5', mode='w')
self.u_hat_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_y_1_file = tables.openFile(self.LPU_id + '_Contrast_y_1.h5', mode='w')
self.Contrast_y_1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_ym_1_file = tables.openFile(self.LPU_id + '_Contrast_ym_1.h5', mode='w')
self.Contrast_ym_1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_f_1_file = tables.openFile(self.LPU_id + '_Contrast_f_1.h5', mode='w')
self.Contrast_f_1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_g_1_file = tables.openFile(self.LPU_id + '_Contrast_g_1.h5', mode='w')
self.Contrast_g_1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_y_2_file = tables.openFile(self.LPU_id + '_Contrast_y_2.h5', mode='w')
self.Contrast_y_2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_ym_2_file = tables.openFile(self.LPU_id + '_Contrast_ym_2.h5', mode='w')
self.Contrast_ym_2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_f_2_file = tables.openFile(self.LPU_id + '_Contrast_f_2.h5', mode='w')
self.Contrast_f_2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_g_2_file = tables.openFile(self.LPU_id + '_Contrast_g_2.h5', mode='w')
self.Contrast_g_2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_y_3_file = tables.openFile(self.LPU_id + '_Contrast_y_3.h5', mode='w')
self.Contrast_y_3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_ym_3_file = tables.openFile(self.LPU_id + '_Contrast_ym_3.h5', mode='w')
self.Contrast_ym_3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_f_3_file = tables.openFile(self.LPU_id + '_Contrast_f_3.h5', mode='w')
self.Contrast_f_3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_g_3_file = tables.openFile(self.LPU_id + '_Contrast_g_3.h5', mode='w')
self.Contrast_g_3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.Contrast_g_file = tables.openFile(self.LPU_id + '_Contrast_g.h5', mode='w')
self.Contrast_g_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u_hat_thresh_file = tables.openFile(self.LPU_id + '_u_hat_thresh.h5', mode='w')
self.u_hat_thresh_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.y_file = tables.openFile(self.LPU_id + '_y.h5', mode='w')
self.y_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.y1_file = tables.openFile(self.LPU_id + '_y1.h5', mode='w')
self.y1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.y2_file = tables.openFile(self.LPU_id + '_y2.h5', mode='w')
self.y2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.y3_file = tables.openFile(self.LPU_id + '_y3.h5', mode='w')
self.y3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.y4_file = tables.openFile(self.LPU_id + '_y4.h5', mode='w')
self.y4_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.y5_file = tables.openFile(self.LPU_id + '_y5.h5', mode='w')
self.y5_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.y6_file = tables.openFile(self.LPU_id + '_y6.h5', mode='w')
self.y6_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u1_file = tables.openFile(self.LPU_id + '_u1.h5', mode='w')
self.u1_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u2_file = tables.openFile(self.LPU_id + '_u2.h5', mode='w')
self.u2_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u3_file = tables.openFile(self.LPU_id + '_u3.h5', mode='w')
self.u3_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u4_file = tables.openFile(self.LPU_id + '_u4.h5', mode='w')
self.u4_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u5_file = tables.openFile(self.LPU_id + '_u5.h5', mode='w')
self.u5_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u6_file = tables.openFile(self.LPU_id + '_u6.h5', mode='w')
self.u6_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
self.u7_file = tables.openFile(self.LPU_id + '_u7.h5', mode='w')
self.u7_file.createEArray('/','array', tables.Float64Atom(), (0,self.num_neurons))
